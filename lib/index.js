"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.writeSync=exports.writeFileSync=exports.writeFile=exports.write=exports.watchFile=exports.watch=exports.utimesSync=exports.utimes=exports.unwatchFile=exports.unlinkSync=exports.unlink=exports.truncateSync=exports.truncate=exports.symlinkSync=exports.symlink=exports.statSync=exports.stat=exports.rmdirSync=exports.rmdir=exports.renameSync=exports.rename=exports.realpathSync=exports.realpath=exports.readlinkSync=exports.readlink=exports.readdirSync=exports.readdir=exports.readSync=exports.readFileSync=exports.readFile=exports.read=exports.openSync=exports.open=exports.mkdtempSync=exports.mkdtemp=exports.mkdirSync=exports.mkdir=exports.lstatSync=exports.lstat=exports.linkSync=exports.link=exports.lchownSync=exports.lchown=exports.lchmodSync=exports.lchmod=exports.futimesSync=exports.futimes=exports.ftruncateSync=exports.ftruncate=exports.fsyncSync=exports.fsync=exports.fstatSync=exports.fstat=exports.fdatasyncSync=exports.fdatasync=exports.fchownSync=exports.fchown=exports.fchmodSync=exports.fchmod=exports.existsSync=exports.exists=exports.createWriteStream=exports.createReadStream=exports.copyFileSync=exports.copyFile=exports.constants=exports.closeSync=exports.close=exports.chownSync=exports.chown=exports.chmodSync=exports.chmod=exports.appendFileSync=exports.appendFile=exports.accessSync=exports.access=exports.X_OK=exports.W_OK=exports.R_OK=exports.F_OK=void 0;var _fs=_interopRequireDefault(require("fs"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const access=(path,mode)=>new Promise((resolve,reject)=>{_fs.default.access(path,mode,e=>!e?resolve():reject(e));});exports.access=access;const accessSync=(path,mode)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.accessSync(path,mode));}catch(e){reject(e);}});exports.accessSync=accessSync;const appendFile=(file,data,options)=>new Promise((resolve,reject)=>{_fs.default.appendFile(file,data,options,e=>!e?resolve():reject(e));});exports.appendFile=appendFile;const appendFileSync=(file,data,options)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.appendFileSync(file,data,options));}catch(e){reject(e);}});exports.appendFileSync=appendFileSync;const chmod=(path,mode)=>new Promise((resolve,reject)=>{_fs.default.chmod(path,mode,e=>!e?resolve():reject(e));});exports.chmod=chmod;const chmodSync=(path,mode)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.chmodSync(path,mode));}catch(e){reject(e);}});exports.chmodSync=chmodSync;const chown=(path,uid,gid)=>new Promise((resolve,reject)=>{_fs.default.chown(path,uid,gid,e=>!e?resolve():reject(e));});exports.chown=chown;const chownSync=(path,uid,gid)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.chownSync(path,uid,gid));}catch(e){reject(e);}});exports.chownSync=chownSync;const close=fd=>new Promise((resolve,reject)=>{_fs.default.close(fd,e=>!e?resolve():reject(e));});exports.close=close;const closeSync=fd=>new Promise((resolve,reject)=>{try{resolve(_fs.default.closeSync(fd));}catch(e){reject(e);}});exports.closeSync=closeSync;const copyFile=(src,dest,flags)=>new Promise((resolve,reject)=>{_fs.default.copyFile(src,dest,flags,e=>!e?resolve():reject(e));});exports.copyFile=copyFile;const copyFileSync=(src,dest,flags)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.copyFileSync(src,dest,flags));}catch(e){reject(e);}});exports.copyFileSync=copyFileSync;const createReadStream=(path,options)=>Promise.resolve(_fs.default.createReadStream(path,options));exports.createReadStream=createReadStream;const createWriteStream=(path,options)=>Promise.resolve(_fs.default.createWriteStream(path,options));exports.createWriteStream=createWriteStream;const exists=path=>new Promise(resolve=>{_fs.default.exists(path,resolve);});exports.exists=exists;const existsSync=path=>Promise.resolve(_fs.default.existsSync(path));exports.existsSync=existsSync;const fchmod=(fd,mode)=>new Promise((resolve,reject)=>{_fs.default.fchmod(fd,mode,e=>!e?resolve():reject(e));});exports.fchmod=fchmod;const fchmodSync=(fd,mode)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.fchmodSync(fd,mode));}catch(e){reject(e);}});exports.fchmodSync=fchmodSync;const fchown=(fd,uid,gid)=>new Promise((resolve,reject)=>{_fs.default.fchown(fd,uid,gid,e=>!e?resolve():reject(e));});exports.fchown=fchown;const fchownSync=(fd,uid,gid)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.fchownSync(fd,uid,gid));}catch(e){reject(e);}});exports.fchownSync=fchownSync;const fdatasync=fd=>new Promise((resolve,reject)=>{_fs.default.fdatasync(fd,e=>!e?resolve():reject(e));});exports.fdatasync=fdatasync;const fdatasyncSync=fd=>new Promise((resolve,reject)=>{try{resolve(_fs.default.fdatasyncSync(fd));}catch(e){reject(e);}});exports.fdatasyncSync=fdatasyncSync;const fstat=fd=>new Promise((resolve,reject)=>{_fs.default.fstat(fd,(e,stats)=>!e?resolve(stats):reject(e));});exports.fstat=fstat;const fstatSync=fd=>new Promise((resolve,reject)=>{try{resolve(_fs.default.fstatSync(fd));}catch(e){reject(e);}});exports.fstatSync=fstatSync;const fsync=fd=>new Promise((resolve,reject)=>{_fs.default.fsync(fd,e=>!e?resolve():reject(e));});exports.fsync=fsync;const fsyncSync=fd=>new Promise((resolve,reject)=>{try{resolve(_fs.default.fsyncSync(fd));}catch(e){reject(e);}});exports.fsyncSync=fsyncSync;const ftruncate=(fd,len)=>new Promise((resolve,reject)=>{_fs.default.ftruncate(fd,len,e=>!e?resolve():reject(e));});exports.ftruncate=ftruncate;const ftruncateSync=(fd,len)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.ftruncateSync(fd,len));}catch(e){reject(e);}});exports.ftruncateSync=ftruncateSync;const futimes=(fd,atime,mtime)=>new Promise((resolve,reject)=>{_fs.default.futimes(fd,atime,mtime,e=>!e?resolve():reject(e));});exports.futimes=futimes;const futimesSync=(fd,atime,mtime)=>Promise.resolve(_fs.default.futimesSync(fd,atime,mtime));exports.futimesSync=futimesSync;const lchmod=(path,mode)=>new Promise((resolve,reject)=>{_fs.default.lchmod(path,mode,e=>!e?resolve():reject(e));});exports.lchmod=lchmod;const lchmodSync=(path,mode)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.lchmodSync(path,mode));}catch(e){reject(e);}});exports.lchmodSync=lchmodSync;const lchown=(path,uid,gid)=>new Promise((resolve,reject)=>{_fs.default.lchown(path,uid,gid,e=>!e?resolve():reject(e));});exports.lchown=lchown;const lchownSync=(path,uid,gid)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.lchownSync(path,uid,gid));}catch(e){reject(e);}});exports.lchownSync=lchownSync;const link=(srcpath,dstpath)=>new Promise((resolve,reject)=>{_fs.default.link(srcpath,dstpath,e=>!e?resolve():reject(e));});exports.link=link;const linkSync=(srcpath,dstpath)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.linkSync(srcpath,dstpath));}catch(e){reject(e);}});exports.linkSync=linkSync;const lstat=path=>new Promise((resolve,reject)=>{_fs.default.lstat(path,(e,stats)=>!e?resolve(stats):reject(e));});exports.lstat=lstat;const lstatSync=path=>Promise.resolve(_fs.default.lstatSync(path));exports.lstatSync=lstatSync;const mkdir=(path,mode)=>new Promise((resolve,reject)=>{_fs.default.mkdir(path,mode,e=>!e?resolve():reject(e));});exports.mkdir=mkdir;const mkdirSync=(path,mode)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.mkdirSync(path,mode));}catch(e){reject(e);}});exports.mkdirSync=mkdirSync;const mkdtemp=(prefix,options)=>new Promise((resolve,reject)=>{_fs.default.mkdtemp(prefix,options,(e,folder)=>!e?resolve(folder):reject(e));});exports.mkdtemp=mkdtemp;const mkdtempSync=(prefix,options)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.mkdtempSync(prefix,options));}catch(e){reject(e);}});exports.mkdtempSync=mkdtempSync;const open=(path,flags,mode)=>new Promise((resolve,reject)=>{_fs.default.open(path,flags,mode,(e,fd)=>!e?resolve(fd):reject(e));});exports.open=open;const openSync=(path,flags,mode)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.openSync(path,flags,mode));}catch(e){reject(e);}});exports.openSync=openSync;const read=(fd,buffer,offset,length,position)=>new Promise((resolve,reject)=>{_fs.default.read(fd,buffer,offset,length,position,(e,bytesRead,buffer)=>!e?resolve({bytesRead,buffer}):reject(e));});exports.read=read;const readSync=(fd,buffer,offset,length,position)=>Promise.resolve(_fs.default.readSync(fd,buffer,offset,length,position));exports.readSync=readSync;const readdir=(path,options)=>new Promise((resolve,reject)=>{_fs.default.readdir(path,options,(e,files)=>!e?resolve(files):reject(e));});exports.readdir=readdir;const readdirSync=(path,options)=>Promise.resolve(_fs.default.readdirSync(path,options));exports.readdirSync=readdirSync;const readFile=(file,options)=>new Promise((resolve,reject)=>{_fs.default.readFile(file,options,(e,data)=>!e?resolve(data):reject(e));});exports.readFile=readFile;const readFileSync=(file,options)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.readFileSync(file,options));}catch(e){reject(e);}});exports.readFileSync=readFileSync;const readlink=(path,options)=>new Promise((resolve,reject)=>{_fs.default.readlink(path,options,(e,linkString)=>!e?resolve(linkString):reject(e));});exports.readlink=readlink;const readlinkSync=(path,options)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.readlinkSync(path,options));}catch(e){reject(e);}});exports.readlinkSync=readlinkSync;const realpath=(path,options)=>new Promise((resolve,reject)=>{_fs.default.realpath(path,options,(e,resolvedPath)=>!e?resolve(resolvedPath):reject(e));});exports.realpath=realpath;const realpathSync=(path,options)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.realpathSync(path,options));}catch(e){reject(e);}});exports.realpathSync=realpathSync;const rename=(oldPath,newPath)=>new Promise((resolve,reject)=>{_fs.default.rename(oldPath,newPath,e=>!e?resolve():reject(e));});exports.rename=rename;const renameSync=(oldPath,newPath)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.renameSync(oldPath,newPath));}catch(e){reject(e);}});exports.renameSync=renameSync;const rmdir=path=>new Promise((resolve,reject)=>{_fs.default.rmdir(path,e=>!e?resolve():reject(e));});exports.rmdir=rmdir;const rmdirSync=path=>new Promise((resolve,reject)=>{try{resolve(_fs.default.rmdirSync(path));}catch(e){reject(e);}});exports.rmdirSync=rmdirSync;const stat=path=>new Promise((resolve,reject)=>{_fs.default.stat(path,(e,stat)=>!e?resolve(stat):reject(e));});exports.stat=stat;const statSync=path=>Promise.resolve(_fs.default.statSync(path));exports.statSync=statSync;const symlink=(target,path,type)=>new Promise((resolve,reject)=>{_fs.default.symlink(target,path,type,e=>!e?resolve():reject(e));});exports.symlink=symlink;const symlinkSync=(target,path,type)=>Promise.resolve(_fs.default.symlinkSync(target,path,type));exports.symlinkSync=symlinkSync;const truncate=(path,len)=>new Promise((resolve,reject)=>{_fs.default.truncate(path,len,e=>!e?resolve():reject(e));});exports.truncate=truncate;const truncateSync=(path,len)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.truncateSync(path,len));}catch(e){reject(e);}});exports.truncateSync=truncateSync;const unlink=path=>new Promise((resolve,reject)=>{_fs.default.unlink(path,e=>!e?resolve():reject(e));});exports.unlink=unlink;const unlinkSync=path=>new Promise((resolve,reject)=>{try{resolve(_fs.default.unlinkSync(path));}catch(e){reject(e);}});exports.unlinkSync=unlinkSync;const unwatchFile=(filename,listener)=>Promise.resolve(_fs.default.unwatchFile(filename,listener));exports.unwatchFile=unwatchFile;const utimes=(path,atime,mtime)=>new Promise((resolve,reject)=>{_fs.default.utimes(path,atime,mtime,e=>!e?resolve():reject(e));});exports.utimes=utimes;const utimesSync=(path,atime,mtime)=>Promise.resolve(_fs.default.utimesSync(path,atime,mtime));exports.utimesSync=utimesSync;const watch=(filename,options,listener)=>Promise.resolve(_fs.default.watch(filename,options,listener));exports.watch=watch;const watchFile=(filename,options,listener)=>Promise.resolve(_fs.default.watchFile(filename,options,listener));exports.watchFile=watchFile;const write=(fd,data,v1,v2,v3)=>new Promise((resolve,reject)=>{const c=e=>!e?resolve():reject(e);if(data instanceof Buffer){_fs.default.write(fd,data,v1,v2,v3,c);}else{_fs.default.write(fd,data,v1,v2,c);}});exports.write=write;const writeFile=(file,data,options)=>new Promise((resolve,reject)=>{_fs.default.writeFile(file,data,options,e=>!e?resolve():reject(e));});exports.writeFile=writeFile;const writeFileSync=(file,data,options)=>new Promise((resolve,reject)=>{try{resolve(_fs.default.writeFileSync(file,data,options));}catch(e){reject(e);}});exports.writeFileSync=writeFileSync;const writeSync=(fd,data,v1,v2,v3)=>new Promise((resolve,reject)=>{try{if(data instanceof Buffer){resolve(_fs.default.writeSync(fd,data,v1,v2,v3));}else{resolve(_fs.default.writeSync(fd,data,v1,v2));}}catch(e){reject(e);}});exports.writeSync=writeSync;const F_OK=_fs.default.F_OK;exports.F_OK=F_OK;const R_OK=_fs.default.R_OK;exports.R_OK=R_OK;const W_OK=_fs.default.W_OK;exports.W_OK=W_OK;const X_OK=_fs.default.X_OK;exports.X_OK=X_OK;const constants=_fs.default.constants;exports.constants=constants;